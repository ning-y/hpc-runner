#!/usr/bin/env python3

import argparse, glob, logging, os, subprocess, sys, time

def main():
    args = get_args()
    clone_repository(args)
    download_locally(args)
    transfer_to_hpc(args)
    start_run_on_hpc(args)
    cleanup_locally(args)

def get_args():
    parser = get_parser()
    return parser.parse_args()

def clone_repository(args) -> None:
    local_dir_to_clone_to = expand_local_dir_to_clone_to(args)
    cmd_mkdir = [
        "mkdir", "--parents",
        os.path.dirname(local_dir_to_clone_to.rstrip("/"))]
    cmd_git_clone = ["git", "clone", args.repo_url, local_dir_to_clone_to]
    cmd_git_checkout = [
        "git", "-C", local_dir_to_clone_to, "checkout", args.repo_ref]
    subprocess.run(cmd_mkdir, check=True)
    if not os.path.isdir(local_dir_to_clone_to):
        subprocess.run(cmd_git_clone, check=True)
    else:
        print(f"{local_dir_to_clone_to} exists, skipping git clone...")
    subprocess.run(cmd_git_checkout, check=True)

def download_locally(args):
    local_dir_to_clone_to = expand_local_dir_to_clone_to(args)
    subprocess.run(
        f"cd {local_dir_to_clone_to} && {args.command_download}",
        shell=True, check=True)

def transfer_to_hpc(args):
    local_dir = expand_local_dir_to_clone_to(args)
    remote_address = expand_remote_address_to_clone_to(args)
    hostname = remote_address.split(":")[0]
    remote_dirp = remote_address.split(":")[1]
    cmd_mkdir = ["ssh", hostname, "mkdir", "--parents", remote_dirp]
    cmd_rsync = [
        "rsync", "--archive", "--checksum", "--progress", "--verbose",
        *glob.glob(os.path.join(local_dir, "*")), remote_address]
    tries = 1
    while tries <= args.max_tries:
        tries += 1
        try:
            subprocess.run(cmd_mkdir, check=True)
            subprocess.run(cmd_rsync, check=True)
        except subprocess.CalledProcessError as e:
            last_exception = e
            time.sleep(args.wait_between_tries)
        else:
            break
    else:
        logging.getLogger(__name__).error(last_exception)
        raise

def start_run_on_hpc(args):
    remote_address = expand_remote_address_to_run(args)
    hostname = remote_address.split(":")[0]
    remote_dirp = remote_address.split(":")[1]
    cmd = ["ssh", hostname, f"bash -i -c 'cd {remote_dirp} && {args.command_run}'"]
    subprocess.run(cmd, check=True)

def get_parser():
    parser = ArgumentParserPrintHelpWhenError(
        prog="hpc-runner",
        description="Run bandwidth-heavy jobs locally, transfer files to HPC, "
            "and run remaining jobs on the HPC")
    parser.add_argument("--max-tries", type=int, default=5)
    parser.add_argument("--wait-between-tries", type=int, default=15)
    parser.add_argument("repo_url", type=str)
    parser.add_argument("repo_ref", type=str)
    parser.add_argument(
        "local_dir_to_clone_to", nargs="?", type=str,
        default="~/runs/{repo_name}-{repo_ref}")
    parser.add_argument(
        "command_download", nargs="?", type=str,
        default="snakemake --profile config-predownload/ predownload")
    parser.add_argument(
        "remote_address_to_clone_to", nargs="?", type=str,
        default="dtn:/mnt/oneFS/behmoaras/home/"
            "e0175719/runs/{repo_name}-{repo_ref}/")
    parser.add_argument(
        "remote_address_to_run", nargs="?", type=str,
        default="hpc:/data/behmoaras/home/"
            "e0175719/runs/{repo_name}-{repo_ref}/")
    parser.add_argument(
        "command_run", nargs="?", type=str,
        default="conda activate snakemake && snakemake --profile config/")
    return parser

def expand_local_dir_to_clone_to(args) -> str:
    return expand_dir(args.local_dir_to_clone_to, args)

def expand_remote_address_to_clone_to(args) -> str:
    return expand_dir(args.remote_address_to_clone_to, args)

def expand_remote_address_to_run(args) -> str:
    return expand_dir(args.remote_address_to_run, args)

def expand_dir(template: str, args) -> str:
    return os.path.expanduser(
        template.format(
            repo_name=repo_name_from_repo_url(args.repo_url),
            repo_ref=args.repo_ref))

def repo_name_from_repo_url(repo_url: str) -> str:
    return repo_url.strip("/").split("/")[-1]

# Adapted from https://stackoverflow.com/a/4042861
class ArgumentParserPrintHelpWhenError(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        self.print_help()
        sys.exit(2)

if __name__ == "__main__": main()
